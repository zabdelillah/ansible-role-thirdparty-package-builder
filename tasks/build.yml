---
- block:
  - name: create build directory
    file:
      path: /tmp/build
      state: directory
  - name: create source directory
    file:
      path: /tmp/build.src
      state: directory

  - name: download archive
    ansible.builtin.get_url:
      url: "{{ source.url }}"
      dest: "{{ source.path }}"
      mode: '0440'
    loop: "{{ package.sources }}"
    loop_control:
      loop_var: source
    when: "source.url is defined"

  - name: download from s3 bucket
    amazon.aws.s3_object:
      bucket: "{{ source.s3.bucket }}"
      object: "{{ source.s3.object }}"
      dest: "{{ source.path }}"
      mode: get
    loop: "{{ package.sources }}"
    loop_control:
      loop_var: source
    when: "source.s3 is defined"

  - name: extract archives
    unarchive:
      src: "{{ source.path }}"
      dest: /tmp/build.src
      remote_src: yes
    loop: "{{ package.sources }}"
    loop_control:
      loop_var: source
    when: "source.archive is defined"

  - name: copy archives
    copy:
      src: "{{ source.path }}"
      dest: /tmp/build.src
      # remote_src: yes
    loop: "{{ package.sources }}"
    loop_control:
      loop_var: source
    when: "source.archive is not defined"

  - name: prepare package
    include_tasks: "{{ item }}"
    loop: "{{ package.scripts.pre_build }}"
    vars:
      build_prefix: /tmp/build

  - include_tasks: debian.yml
    when: ansible_os_family == 'Debian'
  always:
    - name: upload package to s3
      amazon.aws.s3_object:
        bucket: "{{ package.repo.bucket }}"
        object: "{{ package.repo.object_prefix }}/{{ local_package_location | basename }}"
        src: "{{ local_package_location }}"
        mode: put
      when: "package.repo.method == 's3'"

    - name: upload package to http endpoint
      shell: |
        curl --user {{ package.repo.auth.user }}:{{ package.repo.auth.pass }} \
           --upload-file {{ local_package_location }} \
           {{ package.repo.url }}
      when: "package.repo.method == 'http_basic'"
